        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6420:    8:int compare(const void* a, const void* b) {
     6420:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
     6420:   11:	if (*(int*)a < *(int*)b)
     1712:   12:		return -1;
     4708:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      214:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      214:   44:	SelectStream(1);
      214:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      214:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      214:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2354:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    23540:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    21400:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      214:   73:	if (numPlayers == 2)
        -:   74:	{
      214:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      214:   87:	if (numPlayers == 2)
        -:   88:	{
      214:   89:		state->supplyCount[estate] = 8;
      214:   90:		state->supplyCount[duchy] = 8;
      214:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      214:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      214:  102:	state->supplyCount[silver] = 40;
      214:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4494:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    35310:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    33170:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2140:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      428:  115:					if (numPlayers == 2){ 
      214:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1926:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2140:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    31030:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      642:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      428:  140:		state->deckCount[i] = 0;
     1712:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1284:  143:			state->deck[i][j] = estate;
     1284:  144:			state->deckCount[i]++;
        -:  145:		}
     3424:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2996:  148:			state->deck[i][j] = copper;
     2996:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      642:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      428:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      642:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      428:  166:		state->handCount[i] = 0;
      428:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5992:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5778:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      214:  182:	state->outpostPlayed = 0;
      214:  183:	state->phase = 0;
      214:  184:	state->numActions = 1;
      214:  185:	state->numBuys = 1;
      214:  186:	state->playedCardCount = 0;
      214:  187:	state->whoseTurn = 0;
      214:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1284:  192:	for (it = 0; it < 5; it++){
     1070:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      214:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      214:  198:	return 0;
        -:  199:}
        -:  200:
    40940:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
    40940:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
    40940:  209:	if (state->deckCount[player] < 1)
    40512:  210:		return -1;
      428:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5136:  214:	while (state->deckCount[player] > 0) {
     4280:  215:		card = floor(Random() * state->deckCount[player]);
     4280:  216:		newDeck[newDeckPos] = state->deck[player][card];
     4280:  217:		newDeckPos++;
    13268:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
     8988:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     4280:  221:		state->deckCount[player]--;
        -:  222:	}
     4708:  223:	for (i = 0; i < newDeckPos; i++) {
     4280:  224:		state->deck[player][i] = newDeck[i];
     4280:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      428:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      424:  346:int whoseTurn(struct gameState *state) {
      424:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
    #####:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
    #####:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
    #####:  406:			j++;
        -:  407:		}
        -:  408:	}
    #####:  409:	if ( j >= 3)
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
    #####:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
    46734:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
    46734:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
    20256:  533:		for (i = 0; i < state->discardCount[player];i++){
    #####:  534:			state->deck[player][i] = state->discard[player][i];
    #####:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
    20256:  538:		state->deckCount[player] = state->discardCount[player];
    20256:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
    20256:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
    20256:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
    20256:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
    20256:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    20256:  559:		if (deckCounter == 0)
    20256:  560:			return -1;
        -:  561:
    #####:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:		state->deckCount[player]--;
    #####:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
    26478:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
    26478:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
    26478:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    26478:  576:		state->deckCount[player]--;
    26478:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
    26478:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
        -:  648:
        -:  649:/*
        -:  650: * adventurerEffect()
        -:  651: *
        -:  652: * @params
        -:  653: * 		struct gameState	*state				state of the game.
        -:  654: * 		int					currentPlayer		the current player
        -:  655: *
        -:  656: * @pre
        -:  657: * 		intialized game, current player selected.
        -:  658: * 
        -:  659: * @post
        -:  660: * 		adjusted game state in accordance to effect of card.
        -:  661: *
        -:  662: * @desc
        -:  663: * 		Plays the adventurer card.  It draws from the player's deck until two treasure
        -:  664: * 		cards are drawn.  Cards drawn from the deck which are not treasure go to the
        -:  665: * 		player's discard pile.
        -:  666: */
      213:  667:void adventurerEffect(struct gameState *state, int currentPlayer)
        -:  668:{
        -:  669:	/*
        -:  670:	 * moved these declarations from cardEffect() into here.  TODO: omit them from cardEffect() once
        -:  671:	 * all cards have been refactored accordingly.
        -:  672:	 */
      213:  673:	int 	drawntreasure=0;
        -:  674:	int 	cardDrawn;
        -:  675:	int		temphand[MAX_HAND];
      213:  676:	int		z = 0;		/* counter for the temp hand */
        -:  677:
        -:  678:
        -:  679:
    46090:  680:	while (drawntreasure < 2) {
        -:  681:		/* if the deck is empty we need to shuffle discard and add to deck. */
    45664:  682:		if ( state->deckCount[currentPlayer] < 1 ) {
    20256:  683:			shuffle(currentPlayer, state);
        -:  684:		}
        -:  685:
    45664:  686:		drawCard(currentPlayer, state);
        -:  687:
        -:  688:		/* top card of hand is most recently drawn card. */
    45664:  689:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  690:
    45664:  691:		if ( cardDrawn == copper || cardDrawn == gold )
      426:  692:			drawntreasure++;
        -:  693:		else {
    45238:  694:			temphand[z]=cardDrawn;
        -:  695:
        -:  696:			/* this should just remove the top card (the most recently drawn one). */
    45238:  697:			state->handCount[currentPlayer]--; 
    45238:  698:			z++;
        -:  699:		}
        -:  700:	}
    45664:  701:	while( z-1 >= 0 ) {
        -:  702:		/* discard all cards in play that have been drawn.*/
    45238:  703:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    45238:  704:		z--;
        -:  705:	}
      213:  706:}
        -:  707:
        -:  708:
        -:  709:
        -:  710:
        -:  711:/*
        -:  712: * smithyEffect()
        -:  713: *
        -:  714: * @params
        -:  715: * 		struct gameState	*state				state of the game.
        -:  716: * 		int					currentPlayer		the current player.
        -:  717: * 		int					handPos				hand position of smithy card.
        -:  718: *
        -:  719: * @pre
        -:  720: * 		intialized game, current player selected.
        -:  721: * 
        -:  722: * @post
        -:  723: * 		adjusted game state in accordance to effect of card.
        -:  724: *
        -:  725: * @desc
        -:  726: * 		Plays the smithy card.  It's an action card which draws three cards from
        -:  727: * 		the player's deck.
        -:  728: */
      211:  729:void smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  730:{
        -:  731:	int i;
        -:  732:
        -:  733:
      211:  734:	for (i = 0; i < 4; i++)
        -:  735:	{
      211:  736:		break;
        -:  737:		drawCard(currentPlayer, state);
        -:  738:	}
        -:  739:
        -:  740:	/* discard smithy card from hand. */
      211:  741:	discardCard(handPos, currentPlayer, state, 0);
        -:  742:
      211:  743:}
        -:  744:
        -:  745:
        -:  746:
        -:  747:
        -:  748:/*
        -:  749: * remodelEffect()
        -:  750: *
        -:  751: * @params
        -:  752: * 		struct gameState	*state				state of the game.
        -:  753: * 		int					currentPlayer		the current player.
        -:  754: * 		int					handPos				hand position of remodel card.
        -:  755: * 		int					choice1				card chosen to be trashed.
        -:  756: * 		int					choice2				card chosen to be pulled from supply.
        -:  757: *
        -:  758: * @pre
        -:  759: * 		intialized game, current player selected.
        -:  760: * 
        -:  761: * @post
        -:  762: * 		adjusted game state in accordance to effect of card.
        -:  763: *
        -:  764: * @desc
        -:  765: * 		Plays the remodel card.  It's an action card which allows you to trash a card from your hand.
        -:  766: * 		the player may pull a card from the supply costing up to two more than the trashed card.  
        -:  767: * 		the card pulled from supply goes to the discard pile.
        -:  768: */
    #####:  769:void remodelEffect(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -:  770:{
        -:  771:	int j;
        -:  772:	int i;
        -:  773:
        -:  774:	/* store card we will trash. */
    #####:  775:	j = state->hand[currentPlayer][choice1];  
        -:  776:
    #####:  777:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  778:	{
    #####:  779:		return -1;
        -:  780:	}
        -:  781:
    #####:  782:	gainCard(choice2, state, 0, currentPlayer);
        -:  783:
        -:  784:	/* discard remodel card from hand. */
    #####:  785:	discardCard(handPos, currentPlayer, state, 0);
        -:  786:
        -:  787:	/* discard trashed card. */
    #####:  788:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  789:	{
    #####:  790:		if (state->hand[currentPlayer][i] == j)
        -:  791:		{
    #####:  792:			discardCard(i, currentPlayer, state, 0);			
    #####:  793:			break;
        -:  794:		}
        -:  795:	}
        -:  796:}
        -:  797:
        -:  798:
        -:  799:
        -:  800:
        -:  801:/*
        -:  802: * villageEffect()
        -:  803: *
        -:  804: * @params
        -:  805: * 		struct gameState	*state				state of the game.
        -:  806: * 		int					currentPlayer		the current player.
        -:  807: * 		int					handPos				hand position of village card.
        -:  808: *
        -:  809: * @pre
        -:  810: * 		intialized game, current player selected.
        -:  811: * 
        -:  812: * @post
        -:  813: * 		adjusted game state in accordance to effect of card.
        -:  814: *
        -:  815: * @desc
        -:  816: * 		Plays the village card.  It's an action card in which the player draws 
        -:  817: * 		1 card from the player's deck, and allows two more actions on the 
        -:  818: * 		player's turn.
        -:  819: */
    #####:  820:void villageEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  821:{
        -:  822:	/* +1 Card */
    #####:  823:	drawCard(currentPlayer, state);
        -:  824:
        -:  825:	/* +2 Actions */
    #####:  826:	state->numActions += 3;
        -:  827:
        -:  828:	/* discard played card from hand */
    #####:  829:	discardCard(handPos, currentPlayer, state, 0);
    #####:  830:}
        -:  831:
        -:  832:
        -:  833:
        -:  834:
        -:  835:/*
        -:  836: * great_hallEffect()
        -:  837: *
        -:  838: * @params
        -:  839: * 		struct gameState	*state				state of the game.
        -:  840: * 		int					currentPlayer		the current player.
        -:  841: * 		int					handPos				hand position of great_hall card.
        -:  842: *
        -:  843: * @pre
        -:  844: * 		intialized game, current player selected.
        -:  845: * 
        -:  846: * @post
        -:  847: * 		adjusted game state in accordance to effect of card.
        -:  848: *
        -:  849: * @desc
        -:  850: * 		Plays the great_hall card.  It's an action card in which the player draws 
        -:  851: * 		1 card from the player's deck, and allows one more actions on the 
        -:  852: * 		player's turn.
        -:  853: */
    #####:  854:void great_hallEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  855:{
        -:  856:	/* +1 Card */
    #####:  857:	drawCard(currentPlayer, state);
        -:  858:
        -:  859:	/* +1 Actions */
    #####:  860:	state->numActions++;
        -:  861:
        -:  862:	/*i discard card from hand. */
    #####:  863:	discardCard(handPos, currentPlayer, state, 0);
    #####:  864:}
        -:  865:
      424:  866:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  867:{
        -:  868:	int k;
        -:  869:	int x;
        -:  870:	int index;
      424:  871:	int currentPlayer = whoseTurn(state);
      424:  872:	int nextPlayer = currentPlayer + 1;
      424:  873:	int tributeRevealedCards[2] = {-1, -1};
        -:  874:
        -:  875:
        -:  876:	
        -:  877:	/* 
        -:  878:	 * TODO: 	once all the individual effects are refactored into their own functions, omit these 
        -:  879:	 * 			delecrations in the chunk of code below.
        -:  880:	 */
      424:  881:	int drawntreasure=0;	
        -:  882:	int cardDrawn;
        -:  883:	int temphand[MAX_HAND];// moved above the if statement
      424:  884:	int z = 0;// this is the counter for the temp hand
        -:  885:	int i;
        -:  886:	int j;
        -:  887:
        -:  888:
        -:  889:
        -:  890:
        -:  891:
      424:  892:	if (nextPlayer > (state->numPlayers - 1)){
      101:  893:		nextPlayer = 0;
        -:  894:	}
        -:  895:
        -:  896:
        -:  897:	//uses switch to select card and perform actions
      424:  898:	switch( card ) 
        -:  899:	{
        -:  900:		case adventurer:
      213:  901:			adventurerEffect(state, currentPlayer);
      213:  902:			return 0;
        -:  903:
        -:  904:		case council_room:
        -:  905:			//+4 Cards
    #####:  906:			for (i = 0; i < 4; i++)
        -:  907:			{
    #####:  908:				drawCard(currentPlayer, state);
        -:  909:			}
        -:  910:
        -:  911:			//+1 Buy
    #####:  912:			state->numBuys++;
        -:  913:
        -:  914:			//Each other player draws a card
    #####:  915:			for (i = 0; i < state->numPlayers; i++)
        -:  916:			{
    #####:  917:				if ( i != currentPlayer )
        -:  918:				{
    #####:  919:					drawCard(i, state);
        -:  920:				}
        -:  921:			}
        -:  922:
        -:  923:			//put played card in played card pile
    #####:  924:			discardCard(handPos, currentPlayer, state, 0);
        -:  925:
    #####:  926:			return 0;
        -:  927:
        -:  928:		case feast:
        -:  929:			//gain card with cost up to 5
        -:  930:			//Backup hand
    #####:  931:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  932:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  933:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  934:			}
        -:  935:			//Backup hand
        -:  936:
        -:  937:			//Update Coins for Buy
    #####:  938:			updateCoins(currentPlayer, state, 5);
    #####:  939:			x = 1;//Condition to loop on
    #####:  940:			while( x == 1) {//Buy one card
    #####:  941:				if (supplyCount(choice1, state) <= 0){
        -:  942:					if (DEBUG)
        -:  943:						printf("None of that card left, sorry!\n");
        -:  944:
        -:  945:					if (DEBUG){
        -:  946:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  947:					}
        -:  948:				}
    #####:  949:				else if (state->coins < getCost(choice1)){
    #####:  950:					printf("That card is too expensive!\n");
        -:  951:
        -:  952:					if (DEBUG){
        -:  953:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  954:					}
        -:  955:				}
        -:  956:				else{
        -:  957:
        -:  958:					if (DEBUG){
        -:  959:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  960:					}
        -:  961:
    #####:  962:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  963:					x = 0;//No more buying cards
        -:  964:
        -:  965:					if (DEBUG){
        -:  966:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  967:					}
        -:  968:
        -:  969:				}
        -:  970:			}     
        -:  971:
        -:  972:			//Reset Hand
    #####:  973:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  974:				state->hand[currentPlayer][i] = temphand[i];
    #####:  975:				temphand[i] = -1;
        -:  976:			}
        -:  977:			//Reset Hand
        -:  978:
    #####:  979:			return 0;
        -:  980:
        -:  981:		case gardens:
    #####:  982:			return -1;
        -:  983:
        -:  984:		case mine:
    #####:  985:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  986:
    #####:  987:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  988:			{
    #####:  989:				return -1;
        -:  990:			}
        -:  991:
    #####:  992:			if (choice2 > treasure_map || choice2 < curse)
        -:  993:			{
    #####:  994:				return -1;
        -:  995:			}
        -:  996:
    #####:  997:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  998:			{
    #####:  999:				return -1;
        -: 1000:			}
        -: 1001:
    #####: 1002:			gainCard(choice2, state, 2, currentPlayer);
        -: 1003:
        -: 1004:			//discard card from hand
    #####: 1005:			discardCard(handPos, currentPlayer, state, 0);
        -: 1006:
        -: 1007:			//discard trashed card
    #####: 1008:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1009:			{
    #####: 1010:				if (state->hand[currentPlayer][i] == j)
        -: 1011:				{
    #####: 1012:					discardCard(i, currentPlayer, state, 0);			
    #####: 1013:					break;
        -: 1014:				}
        -: 1015:			}
        -: 1016:
    #####: 1017:			return 0;
        -: 1018:
        -: 1019:		case remodel:
    #####: 1020:			remodelEffect(state, currentPlayer, handPos, choice1, choice2);
    #####: 1021:			return 0;
        -: 1022:
        -: 1023:		case smithy:
      211: 1024:			smithyEffect(state, currentPlayer, handPos);
      211: 1025:			return 0;
        -: 1026:
        -: 1027:		case village:
    #####: 1028:			villageEffect(state, currentPlayer, handPos);
    #####: 1029:			return 0;
        -: 1030:
        -: 1031:		case baron:
    #####: 1032:			state->numBuys++;//Increase buys by 1!
    #####: 1033:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1034:				int p = 0;//Iterator for hand!
    #####: 1035:				int card_not_discarded = 1;//Flag for discard set!
    #####: 1036:				while(card_not_discarded){
    #####: 1037:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1038:						state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1039:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1040:						state->discardCount[currentPlayer]++;
    #####: 1041:						for (;p < state->handCount[currentPlayer]; p++){
    #####: 1042:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1043:						}
    #####: 1044:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1045:						state->handCount[currentPlayer]--;
    #####: 1046:						card_not_discarded = 0;//Exit the loop
        -: 1047:					}
    #####: 1048:					else if (p > state->handCount[currentPlayer]){
        -: 1049:						if(DEBUG) {
        -: 1050:							printf("No estate cards in your hand, invalid choice\n");
        -: 1051:							printf("Must gain an estate if there are any\n");
        -: 1052:						}
    #####: 1053:						if (supplyCount(estate, state) > 0){
    #####: 1054:							gainCard(estate, state, 0, currentPlayer);
    #####: 1055:							state->supplyCount[estate]--;//Decrement estates
    #####: 1056:							if (supplyCount(estate, state) == 0){
    #####: 1057:								isGameOver(state);
        -: 1058:							}
        -: 1059:						}
    #####: 1060:						card_not_discarded = 0;//Exit the loop
        -: 1061:					}
        -: 1062:
        -: 1063:					else{
    #####: 1064:						p++;//Next card
        -: 1065:					}
        -: 1066:				}
        -: 1067:			}
        -: 1068:
        -: 1069:			else{
    #####: 1070:				if (supplyCount(estate, state) > 0){
    #####: 1071:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1072:					state->supplyCount[estate]--;//Decrement Estates
    #####: 1073:					if (supplyCount(estate, state) == 0){
    #####: 1074:						isGameOver(state);
        -: 1075:					}
        -: 1076:				}
        -: 1077:			}
        -: 1078:
        -: 1079:
    #####: 1080:			return 0;
        -: 1081:
        -: 1082:		case great_hall:
    #####: 1083:			great_hallEffect(state, currentPlayer, handPos);
    #####: 1084:			return 0;
        -: 1085:
        -: 1086:		case minion:
        -: 1087:			//+1 action
    #####: 1088:			state->numActions++;
        -: 1089:
        -: 1090:			//discard card from hand
    #####: 1091:			discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
    #####: 1093:			if (choice1)		//+2 coins
        -: 1094:			{
    #####: 1095:				state->coins = state->coins + 2;
        -: 1096:			}
        -: 1097:
    #####: 1098:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1099:			{
        -: 1100:				//discard hand
    #####: 1101:				while(numHandCards(state) > 0)
        -: 1102:				{
    #####: 1103:					discardCard(handPos, currentPlayer, state, 0);
        -: 1104:				}
        -: 1105:
        -: 1106:				//draw 4
    #####: 1107:				for (i = 0; i < 4; i++)
        -: 1108:				{
    #####: 1109:					drawCard(currentPlayer, state);
        -: 1110:				}
        -: 1111:
        -: 1112:				//other players discard hand and redraw if hand size > 4
    #####: 1113:				for (i = 0; i < state->numPlayers; i++)
        -: 1114:				{
    #####: 1115:					if (i != currentPlayer)
        -: 1116:					{
    #####: 1117:						if ( state->handCount[i] > 4 )
        -: 1118:						{
        -: 1119:							//discard hand
    #####: 1120:							while( state->handCount[i] > 0 )
        -: 1121:							{
    #####: 1122:								discardCard(handPos, i, state, 0);
        -: 1123:							}
        -: 1124:
        -: 1125:							//draw 4
    #####: 1126:							for (j = 0; j < 4; j++)
        -: 1127:							{
    #####: 1128:								drawCard(i, state);
        -: 1129:							}
        -: 1130:						}
        -: 1131:					}
        -: 1132:				}
        -: 1133:
        -: 1134:			}
    #####: 1135:			return 0;
        -: 1136:
        -: 1137:		case steward:
    #####: 1138:			if (choice1 == 1)
        -: 1139:			{
        -: 1140:				//+2 cards
    #####: 1141:				drawCard(currentPlayer, state);
    #####: 1142:				drawCard(currentPlayer, state);
        -: 1143:			}
    #####: 1144:			else if (choice1 == 2)
        -: 1145:			{
        -: 1146:				//+2 coins
    #####: 1147:				state->coins = state->coins + 2;
        -: 1148:			}
        -: 1149:			else
        -: 1150:			{
        -: 1151:				//trash 2 cards in hand
    #####: 1152:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1153:				discardCard(choice3, currentPlayer, state, 1);
        -: 1154:			}
        -: 1155:
        -: 1156:			//discard card from hand
    #####: 1157:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1158:			return 0;
        -: 1159:
        -: 1160:		case tribute:
    #####: 1161:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1162:				if (state->deckCount[nextPlayer] > 0){
    #####: 1163:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1164:					state->deckCount[nextPlayer]--;
        -: 1165:				}
    #####: 1166:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1167:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1168:					state->discardCount[nextPlayer]--;
        -: 1169:				}
        -: 1170:				else{
        -: 1171:					//No Card to Reveal
        -: 1172:					if (DEBUG){
        -: 1173:						printf("No cards to reveal\n");
        -: 1174:					}
        -: 1175:				}
        -: 1176:			}
        -: 1177:
        -: 1178:			else{
    #####: 1179:				if (state->deckCount[nextPlayer] == 0){
    #####: 1180:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1181:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1182:						state->deckCount[nextPlayer]++;
    #####: 1183:						state->discard[nextPlayer][i] = -1;
    #####: 1184:						state->discardCount[nextPlayer]--;
        -: 1185:					}
        -: 1186:
    #####: 1187:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1188:				} 
    #####: 1189:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1190:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:				state->deckCount[nextPlayer]--;
    #####: 1192:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1193:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:				state->deckCount[nextPlayer]--;
        -: 1195:			}    
        -: 1196:
    #####: 1197:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1198:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:				state->playedCardCount++;
    #####: 1200:				tributeRevealedCards[1] = -1;
        -: 1201:			}
        -: 1202:
    #####: 1203:			for (i = 0; i <= 2; i ++){
    #####: 1204:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1205:					state->coins += 2;
        -: 1206:				}
        -: 1207:
    #####: 1208:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1209:					drawCard(currentPlayer, state);
    #####: 1210:					drawCard(currentPlayer, state);
        -: 1211:				}
        -: 1212:				else{//Action Card
    #####: 1213:					state->numActions = state->numActions + 2;
        -: 1214:				}
        -: 1215:			}
        -: 1216:
    #####: 1217:			return 0;
        -: 1218:
        -: 1219:		case ambassador:
    #####: 1220:			j = 0;		//used to check if player has enough cards to discard
        -: 1221:
    #####: 1222:			if (choice2 > 2 || choice2 < 0)
        -: 1223:			{
    #####: 1224:				return -1;				
        -: 1225:			}
        -: 1226:
    #####: 1227:			if (choice1 == handPos)
        -: 1228:			{
    #####: 1229:				return -1;
        -: 1230:			}
        -: 1231:
    #####: 1232:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:			{
    #####: 1234:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1235:				{
    #####: 1236:					j++;
        -: 1237:				}
        -: 1238:			}
    #####: 1239:			if (j < choice2)
        -: 1240:			{
    #####: 1241:				return -1;				
        -: 1242:			}
        -: 1243:
        -: 1244:			if (DEBUG) 
        -: 1245:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1246:
        -: 1247:			//increase supply count for choosen card by amount being discarded
    #####: 1248:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1249:
        -: 1250:			//each other player gains a copy of revealed card
    #####: 1251:			for (i = 0; i < state->numPlayers; i++)
        -: 1252:			{
    #####: 1253:				if (i != currentPlayer)
        -: 1254:				{
    #####: 1255:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1256:				}
        -: 1257:			}
        -: 1258:
        -: 1259:			//discard played card from hand
    #####: 1260:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1261:
        -: 1262:			//trash copies of cards returned to supply
    #####: 1263:			for (j = 0; j < choice2; j++)
        -: 1264:			{
    #####: 1265:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1266:				{
    #####: 1267:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1268:					{
    #####: 1269:						discardCard(i, currentPlayer, state, 1);
    #####: 1270:						break;
        -: 1271:					}
        -: 1272:				}
        -: 1273:			}			
        -: 1274:
    #####: 1275:			return 0;
        -: 1276:
        -: 1277:		case cutpurse:
        -: 1278:
    #####: 1279:			updateCoins(currentPlayer, state, 2);
    #####: 1280:			for (i = 0; i < state->numPlayers; i++)
        -: 1281:			{
    #####: 1282:				if (i != currentPlayer)
        -: 1283:				{
    #####: 1284:					for (j = 0; j < state->handCount[i]; j++)
        -: 1285:					{
    #####: 1286:						if (state->hand[i][j] == copper)
        -: 1287:						{
    #####: 1288:							discardCard(j, i, state, 0);
    #####: 1289:							break;
        -: 1290:						}
    #####: 1291:						if (j == state->handCount[i])
        -: 1292:						{
    #####: 1293:							for (k = 0; k < state->handCount[i]; k++)
        -: 1294:							{
        -: 1295:								if (DEBUG)
        -: 1296:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1297:							}	
    #####: 1298:							break;
        -: 1299:						}		
        -: 1300:					}
        -: 1301:
        -: 1302:				}
        -: 1303:
        -: 1304:			}				
        -: 1305:
        -: 1306:			//discard played card from hand
    #####: 1307:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1308:
    #####: 1309:			return 0;
        -: 1310:
        -: 1311:
        -: 1312:		case embargo: 
        -: 1313:			//+2 Coins
    #####: 1314:			state->coins = state->coins + 2;
        -: 1315:
        -: 1316:			//see if selected pile is in play
    #####: 1317:			if ( state->supplyCount[choice1] == -1 )
        -: 1318:			{
    #####: 1319:				return -1;
        -: 1320:			}
        -: 1321:
        -: 1322:			//add embargo token to selected supply pile
    #####: 1323:			state->embargoTokens[choice1]++;
        -: 1324:
        -: 1325:			//trash card
    #####: 1326:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1327:			return 0;
        -: 1328:
        -: 1329:		case outpost:
        -: 1330:			//set outpost flag
    #####: 1331:			state->outpostPlayed++;
        -: 1332:
        -: 1333:			//discard card
    #####: 1334:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1335:			return 0;
        -: 1336:
        -: 1337:		case salvager:
        -: 1338:			//+1 buy
    #####: 1339:			state->numBuys++;
        -: 1340:
    #####: 1341:			if (choice1)
        -: 1342:			{
        -: 1343:				//gain coins equal to trashed card
    #####: 1344:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1345:				//trash card
    #####: 1346:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1347:			}
        -: 1348:
        -: 1349:			//discard card
    #####: 1350:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1351:			return 0;
        -: 1352:
        -: 1353:		case sea_hag:
    #####: 1354:			for (i = 0; i < state->numPlayers; i++){
    #####: 1355:				if (i != currentPlayer){
    #####: 1356:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1357:					state->discardCount[i]++;
    #####: 1358:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1359:				}
        -: 1360:			}
    #####: 1361:			return 0;
        -: 1362:
        -: 1363:		case treasure_map:
        -: 1364:			//search hand for another treasure_map
    #####: 1365:			index = -1;
    #####: 1366:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1367:			{
    #####: 1368:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1369:				{
    #####: 1370:					index = i;
    #####: 1371:					break;
        -: 1372:				}
        -: 1373:			}
    #####: 1374:			if (index > -1)
        -: 1375:			{
        -: 1376:				//trash both treasure cards
    #####: 1377:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1378:				discardCard(index, currentPlayer, state, 1);
        -: 1379:
        -: 1380:				//gain 4 Gold cards
    #####: 1381:				for (i = 0; i < 4; i++)
        -: 1382:				{
    #####: 1383:					gainCard(gold, state, 1, currentPlayer);
        -: 1384:				}
        -: 1385:
        -: 1386:				//return success
    #####: 1387:				return 1;
        -: 1388:			}
        -: 1389:
        -: 1390:			//no second treasure_map found in hand
    #####: 1391:			return -1;
        -: 1392:	}
        -: 1393:
    #####: 1394:	return -1;
        -: 1395:}
        -: 1396:
      211: 1397:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1398:{
        -: 1399:
        -: 1400:	//if card is not trashed, added to Played pile 
      211: 1401:	if (trashFlag < 1)
        -: 1402:	{
        -: 1403:		//add card to played pile
      211: 1404:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      211: 1405:		state->playedCardCount++;
        -: 1406:	}
        -: 1407:
        -: 1408:	//set played card to -1
      211: 1409:	state->hand[currentPlayer][handPos] = -1;
        -: 1410:
        -: 1411:	//remove card from player's hand
      211: 1412:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1413:	{
        -: 1414:		//reduce number of cards in hand
        1: 1415:		state->handCount[currentPlayer]--;
        -: 1416:	}
      210: 1417:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1418:	{
        -: 1419:		//reduce number of cards in hand
    #####: 1420:		state->handCount[currentPlayer]--;
        -: 1421:	}
        -: 1422:	else 	
        -: 1423:	{
        -: 1424:		//replace discarded card with last card in hand
      210: 1425:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1426:		//set last card to -1
      210: 1427:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1428:		//reduce number of cards in hand
      210: 1429:		state->handCount[currentPlayer]--;
        -: 1430:	}
        -: 1431:
      211: 1432:	return 0;
        -: 1433:}
        -: 1434:
    #####: 1435:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1436:{
        -: 1437:	//Note: supplyPos is enum of choosen card
        -: 1438:
        -: 1439:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1440:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1441:	{
    #####: 1442:		return -1;
        -: 1443:	}
        -: 1444:
        -: 1445:	//added card for [whoseTurn] current player:
        -: 1446:	// toFlag = 0 : add to discard
        -: 1447:	// toFlag = 1 : add to deck
        -: 1448:	// toFlag = 2 : add to hand
        -: 1449:
    #####: 1450:	if (toFlag == 1)
        -: 1451:	{
    #####: 1452:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1453:		state->deckCount[player]++;
        -: 1454:	}
    #####: 1455:	else if (toFlag == 2)
        -: 1456:	{
    #####: 1457:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1458:		state->handCount[player]++;
        -: 1459:	}
        -: 1460:	else
        -: 1461:	{
    #####: 1462:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1463:		state->discardCount[player]++;
        -: 1464:	}
        -: 1465:
        -: 1466:	//decrease number in supply pile
    #####: 1467:	state->supplyCount[supplyPos]--;
        -: 1468:
    #####: 1469:	return 0;
        -: 1470:}
        -: 1471:
      214: 1472:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1473:{
        -: 1474:	int i;
        -: 1475:
        -: 1476:	//reset coin count
      214: 1477:	state->coins = 0;
        -: 1478:
        -: 1479:	//add coins for each Treasure card in player's hand
     1284: 1480:	for (i = 0; i < state->handCount[player]; i++)
        -: 1481:	{
     1070: 1482:		if (state->hand[player][i] == copper)
        -: 1483:		{
      855: 1484:			state->coins += 1;
        -: 1485:		}
      215: 1486:		else if (state->hand[player][i] == silver)
        -: 1487:		{
    #####: 1488:			state->coins += 2;
        -: 1489:		}
      215: 1490:		else if (state->hand[player][i] == gold)
        -: 1491:		{
    #####: 1492:			state->coins += 3;
        -: 1493:		}	
        -: 1494:	}	
        -: 1495:
        -: 1496:	//add bonus
      214: 1497:	state->coins += bonus;
        -: 1498:
      214: 1499:	return 0;
        -: 1500:}
        -: 1501:
        -: 1502:
        -: 1503://end of dominion.c
        -: 1504:
